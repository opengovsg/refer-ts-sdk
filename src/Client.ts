/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core";
import { Eligibility } from "./api/resources/eligibility/client/Client";
import { Referrals } from "./api/resources/referrals/client/Client";
import { Offerings } from "./api/resources/offerings/client/Client";
import { Public } from "./api/resources/public/client/Client";
import { Webhooks } from "./api/resources/webhooks/client/Client";
import { Health } from "./api/resources/health/client/Client";

export declare namespace ReferralExchangeClient {
    interface Options {
        environment: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class ReferralExchangeClient {
    protected _eligibility: Eligibility | undefined;
    protected _referrals: Referrals | undefined;
    protected _offerings: Offerings | undefined;
    protected _public: Public | undefined;
    protected _webhooks: Webhooks | undefined;
    protected _health: Health | undefined;

    constructor(protected readonly _options: ReferralExchangeClient.Options) {}

    public get eligibility(): Eligibility {
        return (this._eligibility ??= new Eligibility(this._options));
    }

    public get referrals(): Referrals {
        return (this._referrals ??= new Referrals(this._options));
    }

    public get offerings(): Offerings {
        return (this._offerings ??= new Offerings(this._options));
    }

    public get public(): Public {
        return (this._public ??= new Public(this._options));
    }

    public get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this._options));
    }

    public get health(): Health {
        return (this._health ??= new Health(this._options));
    }
}
